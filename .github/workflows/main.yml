name: Clean Stale Branches

on:
  schedule:
    - cron: "*/5 * * * *"  # Runs every 5 minutes
  workflow_dispatch:      # Allows manual triggering of the workflow

permissions:
  contents: write  # Allows deleting branches

jobs:
  clean-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Git
        run: |
          git config user.name "workflow-bot"
          git config user.email "workflow-bot@yourcompany.com"
          
      - name: Fetch All Branches
        run: git fetch --all

      - name: Identify Stale Branches
        id: identify_stale
        run: |
          CURRENT_TIME=$(date +%s)
          FIVE_MINUTES_AGO=$(($CURRENT_TIME - 300))
          touch stale_branches.txt
          git for-each-ref --sort=-committerdate refs/heads/ \
            --format='%(committerdate:unix) %(refname:short)' | while read -r timestamp branch; do
              # Skip protected branches (main, develop, testing)
              if [[ "$branch" == "main" || "$branch" == "develop" || "$branch" == "testing" ]]; then
                continue
              fi
              # Skip branches with user-specific prefixes (alice/, bob/, etc.)
              if [[ "$branch" =~ ^(alice|bob|charlie)/ ]]; then
                continue
              fi
              if [ $timestamp -lt $FIVE_MINUTES_AGO ]; then
                echo "Branch to delete: $branch"
                echo "$branch" >> stale_branches.txt
              fi
          done
        shell: bash

      - name: Debug: Display Stale Branches
        run: |
          cat stale_branches.txt

      - name: Delete Stale Branches
        if: success() && steps.identify_stale.outputs.stale_branches != ''
        run: |
          while read -r branch; do
            # Verify if the branch exists remotely
            git ls-remote --exit-code --heads origin "$branch" && echo "Branch exists: $branch" || echo "Branch does not exist: $branch"
            
            # If the branch exists, delete it
            git rev-parse --verify "$branch" &>/dev/null
            if [ $? -eq 0 ]; then
              echo "Deleting branch: $branch"
              git push origin --delete "$branch"
            else
              echo "Branch $branch does not exist, skipping deletion."
            fi
          done < stale_branches.txt
        shell: bash
