name: Clean Stale Branches

on:
  schedule:
    - cron: "*/5 * * * *"  # Runs the workflow every 5 minutes
  workflow_dispatch:      # Allows manual triggering of the workflow

permissions:
  contents: write  # Allows GitHub Actions to delete branches

jobs:
  clean-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Git
        run: |
          git config user.name "workflow-bot"
          git config user.email "workflow-bot@yourcompany.com"
          
      - name: Fetch All Branches
        run: git fetch --all

      - name: Identify Stale Branches
        id: identify_stale
        run: |
          CURRENT_TIME=$(date +%s)
          FIVE_MINUTES_AGO=$(($CURRENT_TIME - 300))
          
          # Create a file to store stale branches (this file will be created automatically in the repository root)
          touch stale_branches.txt

          # Loop through all branches and check when they were last updated
          git for-each-ref --sort=-committerdate refs/heads/ \
            --format='%(committerdate:unix) %(refname:short)' | while read -r timestamp branch; do
              # Skip protected branches (main, develop, testing)
              if [[ "$branch" == "main" || "$branch" == "develop" || "$branch" == "testing" ]]; then
                continue
              fi
              if [ $timestamp -lt $FIVE_MINUTES_AGO ]; then
                echo "Branch to delete: $branch"
                # Append the stale branch name to the stale_branches.txt file
                echo "$branch" >> stale_branches.txt
              fi
          done
        shell: bash

      - name: Debug:Display Stale Branches
        run: |
          # Check if the stale_branches.txt file exists and is not empty
          if [ -f stale_branches.txt ] && [ -s stale_branches.txt ]; then
            echo "Stale branches found:"
            cat stale_branches.txt  # Display the stale branches in the file
          else
            echo "No stale branches found."
          fi

      - name: Delete Stale Branches
        if: success() && steps.identify_stale.outputs.stale_branches != ''
        run: |
          if [ -f stale_branches.txt ] && [ -s stale_branches.txt ]; then
            while read -r branch; do
              # Verify if the branch exists remotely
              git push origin --delete "$branch"  # Delete the branch from the remote
            done < stale_branches.txt
          else
            echo "No stale branches found to delete."
          fi
        shell: bash
